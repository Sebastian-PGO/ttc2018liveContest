name: build
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Free disk space
        # https://github.com/apache/flink/blob/02d30ace69dc18555a5085eccf70ee884e73a16e/tools/azure-pipelines/free_disk_space.sh
        run: |
          df -h
          echo -----
          sudo apt-get remove -y '^ghc-8.*'
          sudo apt-get remove -y '^dotnet-.*'
          sudo apt-get remove -y '^llvm-.*'
          sudo apt-get remove -y 'php.*'
          sudo apt-get remove -y azure-cli google-cloud-sdk hhvm google-chrome-stable firefox powershell mono-devel
          sudo apt-get autoremove -y
          sudo apt-get clean
          rm -rf /usr/share/dotnet/
          echo -----
          df -h
      - name: Set up Git repository
        uses: actions/checkout@v2.3.1 # If you're using actions/checkout@v2 you must set persist-credentials to false in most cases for the deployment to work correctly.
        with:
          persist-credentials: false
      - name: Load cache
        uses: actions/cache@v2
        with:
          path: cache
          key: docker-v1-${{ github.sha }}
          restore-keys: docker-v1
      - name: Load cached Docker images
        run: |
          if [[ -f cache/docker.zst ]]; then
            zstdcat cache/docker.zst | docker load
            rm cache/*
          else
            echo "::warning::No Docker cache found"
          fi
      - name: Build
        run: |
          sed -i "/REMOVE LINE IN GITHUB ACTIONS/d" docker.sh

          # check that all Dockerfiles contain the same run command
          test $(docker/ls-images.sh --runnable | wc -l) -eq $(grep -F "RUN scripts/run.py -b --skip-tests" docker/Dockerfile-* | wc -l)
          # do not skip tests in CI
          sed -i "s|RUN scripts/run.py -b --skip-tests|RUN scripts/run.py -b|" docker/Dockerfile-*

          # do not use slow release mode for Rust builds
          sed -i "s/--release//;s|/release/|/debug/|;s|\./build\.sh|DIFFERENTIAL_DATALOG_DISABLE_DEBUG= \0|g" \
            solutions/differential*/{solution.ini,build.sh}

          ./docker.sh --build                           # build images
          ./docker.sh --build > cache/docker-build.log  # build again to get only image names and hashes
      - name: Run measurements
        run: |
          docker/set-configs.sh                         # copy generic settings from config.json to config-docker-*.json files
          # run measurements
          # limit the CPU cores if needed, e.g.: --cpus 0-7
          ./docker.sh -r --java-heap-size 6G \
                         --run-params "-mc --error-on-timeout"
      - name: Save Docker images to cache
        run: |
          grep -oFf <(docker images --format "{{.Repository}}:{{.Tag}}" | grep -v "<none>" ; docker images -qa) cache/docker-build.log | tee cache/docker-cache.txt
          docker save $(< cache/docker-cache.txt) | zstd -10 -T0 -o cache/docker.zst
      - name: Save output
        uses: actions/upload-artifact@v2.2.3
        with:
          path: output/
